// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lrobot {
namespace lidarvolumemeas {
class PointDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Point>
     _instance;
} _Point_default_instance_;
class TriangleDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Triangle>
     _instance;
} _Triangle_default_instance_;
class ModelDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Model>
     _instance;
} _Model_default_instance_;
class StatisticDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Statistic>
     _instance;
} _Statistic_default_instance_;
class SysInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SysInfo>
     _instance;
} _SysInfo_default_instance_;
class MeasResultDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MeasResult>
     _instance;
} _MeasResult_default_instance_;
class MessageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Message>
     _instance;
  const ::lrobot::lidarvolumemeas::SysInfo* info_;
  const ::lrobot::lidarvolumemeas::MeasResult* result_;
} _Message_default_instance_;

namespace protobuf_proto_2fmessage_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, z_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Triangle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Triangle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Triangle, v0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Triangle, v1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Triangle, v2_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, triangles_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statistic, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statistic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statistic, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statistic, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statistic, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Statistic, volume_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysInfo, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysInfo, temperature_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeasResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeasResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeasResult, statistic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeasResult, model_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(MessageDefaultTypeInternal, info_),
  offsetof(MessageDefaultTypeInternal, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, data_),
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(Point)},
  { 11, 19, sizeof(Triangle)},
  { 22, 29, sizeof(Model)},
  { 31, 40, sizeof(Statistic)},
  { 44, 51, sizeof(SysInfo)},
  { 53, 60, sizeof(MeasResult)},
  { 62, 70, sizeof(Message)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Point_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Triangle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Model_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Statistic_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SysInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MeasResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Message_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "proto/message.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Point_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Point_default_instance_);_Triangle_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Triangle_default_instance_);_Model_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Model_default_instance_);_Statistic_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Statistic_default_instance_);_SysInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SysInfo_default_instance_);_MeasResult_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MeasResult_default_instance_);_Message_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Message_default_instance_);_MeasResult_default_instance_._instance.get_mutable()->statistic_ = const_cast< ::lrobot::lidarvolumemeas::Statistic*>(
      ::lrobot::lidarvolumemeas::Statistic::internal_default_instance());
  _MeasResult_default_instance_._instance.get_mutable()->model_ = const_cast< ::lrobot::lidarvolumemeas::Model*>(
      ::lrobot::lidarvolumemeas::Model::internal_default_instance());
  _Message_default_instance_.info_ = const_cast< ::lrobot::lidarvolumemeas::SysInfo*>(
      ::lrobot::lidarvolumemeas::SysInfo::internal_default_instance());
  _Message_default_instance_.result_ = const_cast< ::lrobot::lidarvolumemeas::MeasResult*>(
      ::lrobot::lidarvolumemeas::MeasResult::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023proto/message.proto\022\026lrobot.lidarvolum"
      "emeas\"(\n\005Point\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\t\n\001"
      "z\030\003 \002(\002\".\n\010Triangle\022\n\n\002v0\030\001 \002(\005\022\n\n\002v1\030\002 "
      "\002(\005\022\n\n\002v2\030\003 \002(\005\"k\n\005Model\022-\n\006points\030\001 \003(\013"
      "2\035.lrobot.lidarvolumemeas.Point\0223\n\ttrian"
      "gles\030\002 \003(\0132 .lrobot.lidarvolumemeas.Tria"
      "ngle\"J\n\tStatistic\022\016\n\006length\030\001 \002(\001\022\r\n\005wid"
      "th\030\002 \002(\001\022\016\n\006height\030\003 \002(\001\022\016\n\006volume\030\004 \002(\001"
      "\"L\n\007SysInfo\022,\n\005state\030\001 \002(\0162\035.lrobot.lida"
      "rvolumemeas.State\022\023\n\013temperature\030\002 \002(\001\"p"
      "\n\nMeasResult\0224\n\tstatistic\030\001 \002(\0132!.lrobot"
      ".lidarvolumemeas.Statistic\022,\n\005model\030\002 \002("
      "\0132\035.lrobot.lidarvolumemeas.Model\"x\n\007Mess"
      "age\022/\n\004info\030\001 \001(\0132\037.lrobot.lidarvolumeme"
      "as.SysInfoH\000\0224\n\006result\030\002 \001(\0132\".lrobot.li"
      "darvolumemeas.MeasResultH\000B\006\n\004data*5\n\005St"
      "ate\022\010\n\004Idle\020\001\022\r\n\tMeasuring\020\002\022\023\n\017MeasureF"
      "inished\020\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 689);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/message.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_proto_2fmessage_2eproto

const ::google::protobuf::EnumDescriptor* State_descriptor() {
  protobuf_proto_2fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fmessage_2eproto::file_level_enum_descriptors[0];
}
bool State_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
const int Point::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point::Point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lrobot.lidarvolumemeas.Point)
}
Point::Point(const Point& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:lrobot.lidarvolumemeas.Point)
}

void Point::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:lrobot.lidarvolumemeas.Point)
  SharedDtor();
}

void Point::SharedDtor() {
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_proto_2fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Point& Point::default_instance() {
  protobuf_proto_2fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

Point* Point::New(::google::protobuf::Arena* arena) const {
  Point* n = new Point;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:lrobot.lidarvolumemeas.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lrobot.lidarvolumemeas.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lrobot.lidarvolumemeas.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lrobot.lidarvolumemeas.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lrobot.lidarvolumemeas.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float z = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lrobot.lidarvolumemeas.Point)
}

::google::protobuf::uint8* Point::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lrobot.lidarvolumemeas.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lrobot.lidarvolumemeas.Point)
  return target;
}

size_t Point::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:lrobot.lidarvolumemeas.Point)
  size_t total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  if (has_z()) {
    // required float z = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lrobot.lidarvolumemeas.Point)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

    // required float z = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lrobot.lidarvolumemeas.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Point* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lrobot.lidarvolumemeas.Point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lrobot.lidarvolumemeas.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lrobot.lidarvolumemeas.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lrobot.lidarvolumemeas.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lrobot.lidarvolumemeas.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Point::Swap(Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point::InternalSwap(Point* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_proto_2fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Point

// required float x = 1;
bool Point::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Point::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Point::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Point::clear_x() {
  x_ = 0;
  clear_has_x();
}
float Point::x() const {
  // @@protoc_insertion_point(field_get:lrobot.lidarvolumemeas.Point.x)
  return x_;
}
void Point::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:lrobot.lidarvolumemeas.Point.x)
}

// required float y = 2;
bool Point::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Point::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Point::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Point::clear_y() {
  y_ = 0;
  clear_has_y();
}
float Point::y() const {
  // @@protoc_insertion_point(field_get:lrobot.lidarvolumemeas.Point.y)
  return y_;
}
void Point::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:lrobot.lidarvolumemeas.Point.y)
}

// required float z = 3;
bool Point::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Point::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void Point::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void Point::clear_z() {
  z_ = 0;
  clear_has_z();
}
float Point::z() const {
  // @@protoc_insertion_point(field_get:lrobot.lidarvolumemeas.Point.z)
  return z_;
}
void Point::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:lrobot.lidarvolumemeas.Point.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Triangle::kV0FieldNumber;
const int Triangle::kV1FieldNumber;
const int Triangle::kV2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Triangle::Triangle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lrobot.lidarvolumemeas.Triangle)
}
Triangle::Triangle(const Triangle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&v0_, &from.v0_,
    static_cast<size_t>(reinterpret_cast<char*>(&v2_) -
    reinterpret_cast<char*>(&v0_)) + sizeof(v2_));
  // @@protoc_insertion_point(copy_constructor:lrobot.lidarvolumemeas.Triangle)
}

void Triangle::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&v0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&v2_) -
      reinterpret_cast<char*>(&v0_)) + sizeof(v2_));
}

Triangle::~Triangle() {
  // @@protoc_insertion_point(destructor:lrobot.lidarvolumemeas.Triangle)
  SharedDtor();
}

void Triangle::SharedDtor() {
}

void Triangle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Triangle::descriptor() {
  protobuf_proto_2fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Triangle& Triangle::default_instance() {
  protobuf_proto_2fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

Triangle* Triangle::New(::google::protobuf::Arena* arena) const {
  Triangle* n = new Triangle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Triangle::Clear() {
// @@protoc_insertion_point(message_clear_start:lrobot.lidarvolumemeas.Triangle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&v0_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&v2_) -
        reinterpret_cast<char*>(&v0_)) + sizeof(v2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Triangle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lrobot.lidarvolumemeas.Triangle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 v0 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_v0();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 v1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_v1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 v2 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_v2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lrobot.lidarvolumemeas.Triangle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lrobot.lidarvolumemeas.Triangle)
  return false;
#undef DO_
}

void Triangle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lrobot.lidarvolumemeas.Triangle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 v0 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->v0(), output);
  }

  // required int32 v1 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->v1(), output);
  }

  // required int32 v2 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->v2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lrobot.lidarvolumemeas.Triangle)
}

::google::protobuf::uint8* Triangle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lrobot.lidarvolumemeas.Triangle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 v0 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->v0(), target);
  }

  // required int32 v1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->v1(), target);
  }

  // required int32 v2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->v2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lrobot.lidarvolumemeas.Triangle)
  return target;
}

size_t Triangle::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:lrobot.lidarvolumemeas.Triangle)
  size_t total_size = 0;

  if (has_v0()) {
    // required int32 v0 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->v0());
  }

  if (has_v1()) {
    // required int32 v1 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->v1());
  }

  if (has_v2()) {
    // required int32 v2 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->v2());
  }

  return total_size;
}
size_t Triangle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lrobot.lidarvolumemeas.Triangle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 v0 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->v0());

    // required int32 v1 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->v1());

    // required int32 v2 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->v2());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Triangle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lrobot.lidarvolumemeas.Triangle)
  GOOGLE_DCHECK_NE(&from, this);
  const Triangle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Triangle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lrobot.lidarvolumemeas.Triangle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lrobot.lidarvolumemeas.Triangle)
    MergeFrom(*source);
  }
}

void Triangle::MergeFrom(const Triangle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lrobot.lidarvolumemeas.Triangle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      v0_ = from.v0_;
    }
    if (cached_has_bits & 0x00000002u) {
      v1_ = from.v1_;
    }
    if (cached_has_bits & 0x00000004u) {
      v2_ = from.v2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Triangle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lrobot.lidarvolumemeas.Triangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Triangle::CopyFrom(const Triangle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lrobot.lidarvolumemeas.Triangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Triangle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Triangle::Swap(Triangle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Triangle::InternalSwap(Triangle* other) {
  using std::swap;
  swap(v0_, other->v0_);
  swap(v1_, other->v1_);
  swap(v2_, other->v2_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Triangle::GetMetadata() const {
  protobuf_proto_2fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Triangle

// required int32 v0 = 1;
bool Triangle::has_v0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Triangle::set_has_v0() {
  _has_bits_[0] |= 0x00000001u;
}
void Triangle::clear_has_v0() {
  _has_bits_[0] &= ~0x00000001u;
}
void Triangle::clear_v0() {
  v0_ = 0;
  clear_has_v0();
}
::google::protobuf::int32 Triangle::v0() const {
  // @@protoc_insertion_point(field_get:lrobot.lidarvolumemeas.Triangle.v0)
  return v0_;
}
void Triangle::set_v0(::google::protobuf::int32 value) {
  set_has_v0();
  v0_ = value;
  // @@protoc_insertion_point(field_set:lrobot.lidarvolumemeas.Triangle.v0)
}

// required int32 v1 = 2;
bool Triangle::has_v1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Triangle::set_has_v1() {
  _has_bits_[0] |= 0x00000002u;
}
void Triangle::clear_has_v1() {
  _has_bits_[0] &= ~0x00000002u;
}
void Triangle::clear_v1() {
  v1_ = 0;
  clear_has_v1();
}
::google::protobuf::int32 Triangle::v1() const {
  // @@protoc_insertion_point(field_get:lrobot.lidarvolumemeas.Triangle.v1)
  return v1_;
}
void Triangle::set_v1(::google::protobuf::int32 value) {
  set_has_v1();
  v1_ = value;
  // @@protoc_insertion_point(field_set:lrobot.lidarvolumemeas.Triangle.v1)
}

// required int32 v2 = 3;
bool Triangle::has_v2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Triangle::set_has_v2() {
  _has_bits_[0] |= 0x00000004u;
}
void Triangle::clear_has_v2() {
  _has_bits_[0] &= ~0x00000004u;
}
void Triangle::clear_v2() {
  v2_ = 0;
  clear_has_v2();
}
::google::protobuf::int32 Triangle::v2() const {
  // @@protoc_insertion_point(field_get:lrobot.lidarvolumemeas.Triangle.v2)
  return v2_;
}
void Triangle::set_v2(::google::protobuf::int32 value) {
  set_has_v2();
  v2_ = value;
  // @@protoc_insertion_point(field_set:lrobot.lidarvolumemeas.Triangle.v2)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Model::kPointsFieldNumber;
const int Model::kTrianglesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Model::Model()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lrobot.lidarvolumemeas.Model)
}
Model::Model(const Model& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      points_(from.points_),
      triangles_(from.triangles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lrobot.lidarvolumemeas.Model)
}

void Model::SharedCtor() {
  _cached_size_ = 0;
}

Model::~Model() {
  // @@protoc_insertion_point(destructor:lrobot.lidarvolumemeas.Model)
  SharedDtor();
}

void Model::SharedDtor() {
}

void Model::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Model::descriptor() {
  protobuf_proto_2fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Model& Model::default_instance() {
  protobuf_proto_2fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

Model* Model::New(::google::protobuf::Arena* arena) const {
  Model* n = new Model;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Model::Clear() {
// @@protoc_insertion_point(message_clear_start:lrobot.lidarvolumemeas.Model)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  triangles_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Model::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lrobot.lidarvolumemeas.Model)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .lrobot.lidarvolumemeas.Point points = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .lrobot.lidarvolumemeas.Triangle triangles = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_triangles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lrobot.lidarvolumemeas.Model)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lrobot.lidarvolumemeas.Model)
  return false;
#undef DO_
}

void Model::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lrobot.lidarvolumemeas.Model)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .lrobot.lidarvolumemeas.Point points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->points(static_cast<int>(i)), output);
  }

  // repeated .lrobot.lidarvolumemeas.Triangle triangles = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->triangles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->triangles(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lrobot.lidarvolumemeas.Model)
}

::google::protobuf::uint8* Model::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lrobot.lidarvolumemeas.Model)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .lrobot.lidarvolumemeas.Point points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->points(static_cast<int>(i)), deterministic, target);
  }

  // repeated .lrobot.lidarvolumemeas.Triangle triangles = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->triangles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->triangles(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lrobot.lidarvolumemeas.Model)
  return target;
}

size_t Model::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lrobot.lidarvolumemeas.Model)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .lrobot.lidarvolumemeas.Point points = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->points(static_cast<int>(i)));
    }
  }

  // repeated .lrobot.lidarvolumemeas.Triangle triangles = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->triangles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->triangles(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Model::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lrobot.lidarvolumemeas.Model)
  GOOGLE_DCHECK_NE(&from, this);
  const Model* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Model>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lrobot.lidarvolumemeas.Model)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lrobot.lidarvolumemeas.Model)
    MergeFrom(*source);
  }
}

void Model::MergeFrom(const Model& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lrobot.lidarvolumemeas.Model)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  triangles_.MergeFrom(from.triangles_);
}

void Model::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lrobot.lidarvolumemeas.Model)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Model::CopyFrom(const Model& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lrobot.lidarvolumemeas.Model)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Model::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->points())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->triangles())) return false;
  return true;
}

void Model::Swap(Model* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Model::InternalSwap(Model* other) {
  using std::swap;
  points_.InternalSwap(&other->points_);
  triangles_.InternalSwap(&other->triangles_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Model::GetMetadata() const {
  protobuf_proto_2fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Model

// repeated .lrobot.lidarvolumemeas.Point points = 1;
int Model::points_size() const {
  return points_.size();
}
void Model::clear_points() {
  points_.Clear();
}
const ::lrobot::lidarvolumemeas::Point& Model::points(int index) const {
  // @@protoc_insertion_point(field_get:lrobot.lidarvolumemeas.Model.points)
  return points_.Get(index);
}
::lrobot::lidarvolumemeas::Point* Model::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:lrobot.lidarvolumemeas.Model.points)
  return points_.Mutable(index);
}
::lrobot::lidarvolumemeas::Point* Model::add_points() {
  // @@protoc_insertion_point(field_add:lrobot.lidarvolumemeas.Model.points)
  return points_.Add();
}
::google::protobuf::RepeatedPtrField< ::lrobot::lidarvolumemeas::Point >*
Model::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:lrobot.lidarvolumemeas.Model.points)
  return &points_;
}
const ::google::protobuf::RepeatedPtrField< ::lrobot::lidarvolumemeas::Point >&
Model::points() const {
  // @@protoc_insertion_point(field_list:lrobot.lidarvolumemeas.Model.points)
  return points_;
}

// repeated .lrobot.lidarvolumemeas.Triangle triangles = 2;
int Model::triangles_size() const {
  return triangles_.size();
}
void Model::clear_triangles() {
  triangles_.Clear();
}
const ::lrobot::lidarvolumemeas::Triangle& Model::triangles(int index) const {
  // @@protoc_insertion_point(field_get:lrobot.lidarvolumemeas.Model.triangles)
  return triangles_.Get(index);
}
::lrobot::lidarvolumemeas::Triangle* Model::mutable_triangles(int index) {
  // @@protoc_insertion_point(field_mutable:lrobot.lidarvolumemeas.Model.triangles)
  return triangles_.Mutable(index);
}
::lrobot::lidarvolumemeas::Triangle* Model::add_triangles() {
  // @@protoc_insertion_point(field_add:lrobot.lidarvolumemeas.Model.triangles)
  return triangles_.Add();
}
::google::protobuf::RepeatedPtrField< ::lrobot::lidarvolumemeas::Triangle >*
Model::mutable_triangles() {
  // @@protoc_insertion_point(field_mutable_list:lrobot.lidarvolumemeas.Model.triangles)
  return &triangles_;
}
const ::google::protobuf::RepeatedPtrField< ::lrobot::lidarvolumemeas::Triangle >&
Model::triangles() const {
  // @@protoc_insertion_point(field_list:lrobot.lidarvolumemeas.Model.triangles)
  return triangles_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Statistic::kLengthFieldNumber;
const int Statistic::kWidthFieldNumber;
const int Statistic::kHeightFieldNumber;
const int Statistic::kVolumeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Statistic::Statistic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lrobot.lidarvolumemeas.Statistic)
}
Statistic::Statistic(const Statistic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&length_, &from.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&volume_) -
    reinterpret_cast<char*>(&length_)) + sizeof(volume_));
  // @@protoc_insertion_point(copy_constructor:lrobot.lidarvolumemeas.Statistic)
}

void Statistic::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_) -
      reinterpret_cast<char*>(&length_)) + sizeof(volume_));
}

Statistic::~Statistic() {
  // @@protoc_insertion_point(destructor:lrobot.lidarvolumemeas.Statistic)
  SharedDtor();
}

void Statistic::SharedDtor() {
}

void Statistic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Statistic::descriptor() {
  protobuf_proto_2fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Statistic& Statistic::default_instance() {
  protobuf_proto_2fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

Statistic* Statistic::New(::google::protobuf::Arena* arena) const {
  Statistic* n = new Statistic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Statistic::Clear() {
// @@protoc_insertion_point(message_clear_start:lrobot.lidarvolumemeas.Statistic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&volume_) -
        reinterpret_cast<char*>(&length_)) + sizeof(volume_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Statistic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lrobot.lidarvolumemeas.Statistic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double length = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double volume = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lrobot.lidarvolumemeas.Statistic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lrobot.lidarvolumemeas.Statistic)
  return false;
#undef DO_
}

void Statistic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lrobot.lidarvolumemeas.Statistic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double length = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->length(), output);
  }

  // required double width = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->width(), output);
  }

  // required double height = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->height(), output);
  }

  // required double volume = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->volume(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lrobot.lidarvolumemeas.Statistic)
}

::google::protobuf::uint8* Statistic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lrobot.lidarvolumemeas.Statistic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double length = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->length(), target);
  }

  // required double width = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->width(), target);
  }

  // required double height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->height(), target);
  }

  // required double volume = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->volume(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lrobot.lidarvolumemeas.Statistic)
  return target;
}

size_t Statistic::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:lrobot.lidarvolumemeas.Statistic)
  size_t total_size = 0;

  if (has_length()) {
    // required double length = 1;
    total_size += 1 + 8;
  }

  if (has_width()) {
    // required double width = 2;
    total_size += 1 + 8;
  }

  if (has_height()) {
    // required double height = 3;
    total_size += 1 + 8;
  }

  if (has_volume()) {
    // required double volume = 4;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t Statistic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lrobot.lidarvolumemeas.Statistic)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required double length = 1;
    total_size += 1 + 8;

    // required double width = 2;
    total_size += 1 + 8;

    // required double height = 3;
    total_size += 1 + 8;

    // required double volume = 4;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Statistic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lrobot.lidarvolumemeas.Statistic)
  GOOGLE_DCHECK_NE(&from, this);
  const Statistic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Statistic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lrobot.lidarvolumemeas.Statistic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lrobot.lidarvolumemeas.Statistic)
    MergeFrom(*source);
  }
}

void Statistic::MergeFrom(const Statistic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lrobot.lidarvolumemeas.Statistic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000002u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000008u) {
      volume_ = from.volume_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Statistic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lrobot.lidarvolumemeas.Statistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Statistic::CopyFrom(const Statistic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lrobot.lidarvolumemeas.Statistic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Statistic::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void Statistic::Swap(Statistic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Statistic::InternalSwap(Statistic* other) {
  using std::swap;
  swap(length_, other->length_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(volume_, other->volume_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Statistic::GetMetadata() const {
  protobuf_proto_2fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Statistic

// required double length = 1;
bool Statistic::has_length() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Statistic::set_has_length() {
  _has_bits_[0] |= 0x00000001u;
}
void Statistic::clear_has_length() {
  _has_bits_[0] &= ~0x00000001u;
}
void Statistic::clear_length() {
  length_ = 0;
  clear_has_length();
}
double Statistic::length() const {
  // @@protoc_insertion_point(field_get:lrobot.lidarvolumemeas.Statistic.length)
  return length_;
}
void Statistic::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:lrobot.lidarvolumemeas.Statistic.length)
}

// required double width = 2;
bool Statistic::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Statistic::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
void Statistic::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
void Statistic::clear_width() {
  width_ = 0;
  clear_has_width();
}
double Statistic::width() const {
  // @@protoc_insertion_point(field_get:lrobot.lidarvolumemeas.Statistic.width)
  return width_;
}
void Statistic::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:lrobot.lidarvolumemeas.Statistic.width)
}

// required double height = 3;
bool Statistic::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Statistic::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
void Statistic::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
void Statistic::clear_height() {
  height_ = 0;
  clear_has_height();
}
double Statistic::height() const {
  // @@protoc_insertion_point(field_get:lrobot.lidarvolumemeas.Statistic.height)
  return height_;
}
void Statistic::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:lrobot.lidarvolumemeas.Statistic.height)
}

// required double volume = 4;
bool Statistic::has_volume() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Statistic::set_has_volume() {
  _has_bits_[0] |= 0x00000008u;
}
void Statistic::clear_has_volume() {
  _has_bits_[0] &= ~0x00000008u;
}
void Statistic::clear_volume() {
  volume_ = 0;
  clear_has_volume();
}
double Statistic::volume() const {
  // @@protoc_insertion_point(field_get:lrobot.lidarvolumemeas.Statistic.volume)
  return volume_;
}
void Statistic::set_volume(double value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:lrobot.lidarvolumemeas.Statistic.volume)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SysInfo::kStateFieldNumber;
const int SysInfo::kTemperatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SysInfo::SysInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lrobot.lidarvolumemeas.SysInfo)
}
SysInfo::SysInfo(const SysInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&temperature_, &from.temperature_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&temperature_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:lrobot.lidarvolumemeas.SysInfo)
}

void SysInfo::SharedCtor() {
  _cached_size_ = 0;
  temperature_ = 0;
  state_ = 1;
}

SysInfo::~SysInfo() {
  // @@protoc_insertion_point(destructor:lrobot.lidarvolumemeas.SysInfo)
  SharedDtor();
}

void SysInfo::SharedDtor() {
}

void SysInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SysInfo::descriptor() {
  protobuf_proto_2fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SysInfo& SysInfo::default_instance() {
  protobuf_proto_2fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

SysInfo* SysInfo::New(::google::protobuf::Arena* arena) const {
  SysInfo* n = new SysInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SysInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:lrobot.lidarvolumemeas.SysInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    temperature_ = 0;
    state_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SysInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lrobot.lidarvolumemeas.SysInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .lrobot.lidarvolumemeas.State state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::lrobot::lidarvolumemeas::State_IsValid(value)) {
            set_state(static_cast< ::lrobot::lidarvolumemeas::State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double temperature = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_temperature();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &temperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lrobot.lidarvolumemeas.SysInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lrobot.lidarvolumemeas.SysInfo)
  return false;
#undef DO_
}

void SysInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lrobot.lidarvolumemeas.SysInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .lrobot.lidarvolumemeas.State state = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // required double temperature = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->temperature(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lrobot.lidarvolumemeas.SysInfo)
}

::google::protobuf::uint8* SysInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lrobot.lidarvolumemeas.SysInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .lrobot.lidarvolumemeas.State state = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // required double temperature = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->temperature(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lrobot.lidarvolumemeas.SysInfo)
  return target;
}

size_t SysInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:lrobot.lidarvolumemeas.SysInfo)
  size_t total_size = 0;

  if (has_temperature()) {
    // required double temperature = 2;
    total_size += 1 + 8;
  }

  if (has_state()) {
    // required .lrobot.lidarvolumemeas.State state = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  return total_size;
}
size_t SysInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lrobot.lidarvolumemeas.SysInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double temperature = 2;
    total_size += 1 + 8;

    // required .lrobot.lidarvolumemeas.State state = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SysInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lrobot.lidarvolumemeas.SysInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SysInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SysInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lrobot.lidarvolumemeas.SysInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lrobot.lidarvolumemeas.SysInfo)
    MergeFrom(*source);
  }
}

void SysInfo::MergeFrom(const SysInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lrobot.lidarvolumemeas.SysInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      temperature_ = from.temperature_;
    }
    if (cached_has_bits & 0x00000002u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SysInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lrobot.lidarvolumemeas.SysInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SysInfo::CopyFrom(const SysInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lrobot.lidarvolumemeas.SysInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SysInfo::Swap(SysInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SysInfo::InternalSwap(SysInfo* other) {
  using std::swap;
  swap(temperature_, other->temperature_);
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SysInfo::GetMetadata() const {
  protobuf_proto_2fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SysInfo

// required .lrobot.lidarvolumemeas.State state = 1;
bool SysInfo::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SysInfo::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
void SysInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
void SysInfo::clear_state() {
  state_ = 1;
  clear_has_state();
}
::lrobot::lidarvolumemeas::State SysInfo::state() const {
  // @@protoc_insertion_point(field_get:lrobot.lidarvolumemeas.SysInfo.state)
  return static_cast< ::lrobot::lidarvolumemeas::State >(state_);
}
void SysInfo::set_state(::lrobot::lidarvolumemeas::State value) {
  assert(::lrobot::lidarvolumemeas::State_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:lrobot.lidarvolumemeas.SysInfo.state)
}

// required double temperature = 2;
bool SysInfo::has_temperature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SysInfo::set_has_temperature() {
  _has_bits_[0] |= 0x00000001u;
}
void SysInfo::clear_has_temperature() {
  _has_bits_[0] &= ~0x00000001u;
}
void SysInfo::clear_temperature() {
  temperature_ = 0;
  clear_has_temperature();
}
double SysInfo::temperature() const {
  // @@protoc_insertion_point(field_get:lrobot.lidarvolumemeas.SysInfo.temperature)
  return temperature_;
}
void SysInfo::set_temperature(double value) {
  set_has_temperature();
  temperature_ = value;
  // @@protoc_insertion_point(field_set:lrobot.lidarvolumemeas.SysInfo.temperature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MeasResult::kStatisticFieldNumber;
const int MeasResult::kModelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MeasResult::MeasResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lrobot.lidarvolumemeas.MeasResult)
}
MeasResult::MeasResult(const MeasResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_statistic()) {
    statistic_ = new ::lrobot::lidarvolumemeas::Statistic(*from.statistic_);
  } else {
    statistic_ = NULL;
  }
  if (from.has_model()) {
    model_ = new ::lrobot::lidarvolumemeas::Model(*from.model_);
  } else {
    model_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:lrobot.lidarvolumemeas.MeasResult)
}

void MeasResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&statistic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&model_) -
      reinterpret_cast<char*>(&statistic_)) + sizeof(model_));
}

MeasResult::~MeasResult() {
  // @@protoc_insertion_point(destructor:lrobot.lidarvolumemeas.MeasResult)
  SharedDtor();
}

void MeasResult::SharedDtor() {
  if (this != internal_default_instance()) delete statistic_;
  if (this != internal_default_instance()) delete model_;
}

void MeasResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MeasResult::descriptor() {
  protobuf_proto_2fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MeasResult& MeasResult::default_instance() {
  protobuf_proto_2fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

MeasResult* MeasResult::New(::google::protobuf::Arena* arena) const {
  MeasResult* n = new MeasResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MeasResult::Clear() {
// @@protoc_insertion_point(message_clear_start:lrobot.lidarvolumemeas.MeasResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(statistic_ != NULL);
      statistic_->::lrobot::lidarvolumemeas::Statistic::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(model_ != NULL);
      model_->::lrobot::lidarvolumemeas::Model::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MeasResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lrobot.lidarvolumemeas.MeasResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .lrobot.lidarvolumemeas.Statistic statistic = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_statistic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .lrobot.lidarvolumemeas.Model model = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_model()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lrobot.lidarvolumemeas.MeasResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lrobot.lidarvolumemeas.MeasResult)
  return false;
#undef DO_
}

void MeasResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lrobot.lidarvolumemeas.MeasResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .lrobot.lidarvolumemeas.Statistic statistic = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->statistic_, output);
  }

  // required .lrobot.lidarvolumemeas.Model model = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->model_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lrobot.lidarvolumemeas.MeasResult)
}

::google::protobuf::uint8* MeasResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lrobot.lidarvolumemeas.MeasResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .lrobot.lidarvolumemeas.Statistic statistic = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->statistic_, deterministic, target);
  }

  // required .lrobot.lidarvolumemeas.Model model = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->model_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lrobot.lidarvolumemeas.MeasResult)
  return target;
}

size_t MeasResult::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:lrobot.lidarvolumemeas.MeasResult)
  size_t total_size = 0;

  if (has_statistic()) {
    // required .lrobot.lidarvolumemeas.Statistic statistic = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->statistic_);
  }

  if (has_model()) {
    // required .lrobot.lidarvolumemeas.Model model = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->model_);
  }

  return total_size;
}
size_t MeasResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lrobot.lidarvolumemeas.MeasResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .lrobot.lidarvolumemeas.Statistic statistic = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->statistic_);

    // required .lrobot.lidarvolumemeas.Model model = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->model_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MeasResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lrobot.lidarvolumemeas.MeasResult)
  GOOGLE_DCHECK_NE(&from, this);
  const MeasResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MeasResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lrobot.lidarvolumemeas.MeasResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lrobot.lidarvolumemeas.MeasResult)
    MergeFrom(*source);
  }
}

void MeasResult::MergeFrom(const MeasResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lrobot.lidarvolumemeas.MeasResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_statistic()->::lrobot::lidarvolumemeas::Statistic::MergeFrom(from.statistic());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_model()->::lrobot::lidarvolumemeas::Model::MergeFrom(from.model());
    }
  }
}

void MeasResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lrobot.lidarvolumemeas.MeasResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeasResult::CopyFrom(const MeasResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lrobot.lidarvolumemeas.MeasResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeasResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_statistic()) {
    if (!this->statistic_->IsInitialized()) return false;
  }
  if (has_model()) {
    if (!this->model_->IsInitialized()) return false;
  }
  return true;
}

void MeasResult::Swap(MeasResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MeasResult::InternalSwap(MeasResult* other) {
  using std::swap;
  swap(statistic_, other->statistic_);
  swap(model_, other->model_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MeasResult::GetMetadata() const {
  protobuf_proto_2fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MeasResult

// required .lrobot.lidarvolumemeas.Statistic statistic = 1;
bool MeasResult::has_statistic() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MeasResult::set_has_statistic() {
  _has_bits_[0] |= 0x00000001u;
}
void MeasResult::clear_has_statistic() {
  _has_bits_[0] &= ~0x00000001u;
}
void MeasResult::clear_statistic() {
  if (statistic_ != NULL) statistic_->::lrobot::lidarvolumemeas::Statistic::Clear();
  clear_has_statistic();
}
const ::lrobot::lidarvolumemeas::Statistic& MeasResult::statistic() const {
  const ::lrobot::lidarvolumemeas::Statistic* p = statistic_;
  // @@protoc_insertion_point(field_get:lrobot.lidarvolumemeas.MeasResult.statistic)
  return p != NULL ? *p : *reinterpret_cast<const ::lrobot::lidarvolumemeas::Statistic*>(
      &::lrobot::lidarvolumemeas::_Statistic_default_instance_);
}
::lrobot::lidarvolumemeas::Statistic* MeasResult::mutable_statistic() {
  set_has_statistic();
  if (statistic_ == NULL) {
    statistic_ = new ::lrobot::lidarvolumemeas::Statistic;
  }
  // @@protoc_insertion_point(field_mutable:lrobot.lidarvolumemeas.MeasResult.statistic)
  return statistic_;
}
::lrobot::lidarvolumemeas::Statistic* MeasResult::release_statistic() {
  // @@protoc_insertion_point(field_release:lrobot.lidarvolumemeas.MeasResult.statistic)
  clear_has_statistic();
  ::lrobot::lidarvolumemeas::Statistic* temp = statistic_;
  statistic_ = NULL;
  return temp;
}
void MeasResult::set_allocated_statistic(::lrobot::lidarvolumemeas::Statistic* statistic) {
  delete statistic_;
  statistic_ = statistic;
  if (statistic) {
    set_has_statistic();
  } else {
    clear_has_statistic();
  }
  // @@protoc_insertion_point(field_set_allocated:lrobot.lidarvolumemeas.MeasResult.statistic)
}

// required .lrobot.lidarvolumemeas.Model model = 2;
bool MeasResult::has_model() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MeasResult::set_has_model() {
  _has_bits_[0] |= 0x00000002u;
}
void MeasResult::clear_has_model() {
  _has_bits_[0] &= ~0x00000002u;
}
void MeasResult::clear_model() {
  if (model_ != NULL) model_->::lrobot::lidarvolumemeas::Model::Clear();
  clear_has_model();
}
const ::lrobot::lidarvolumemeas::Model& MeasResult::model() const {
  const ::lrobot::lidarvolumemeas::Model* p = model_;
  // @@protoc_insertion_point(field_get:lrobot.lidarvolumemeas.MeasResult.model)
  return p != NULL ? *p : *reinterpret_cast<const ::lrobot::lidarvolumemeas::Model*>(
      &::lrobot::lidarvolumemeas::_Model_default_instance_);
}
::lrobot::lidarvolumemeas::Model* MeasResult::mutable_model() {
  set_has_model();
  if (model_ == NULL) {
    model_ = new ::lrobot::lidarvolumemeas::Model;
  }
  // @@protoc_insertion_point(field_mutable:lrobot.lidarvolumemeas.MeasResult.model)
  return model_;
}
::lrobot::lidarvolumemeas::Model* MeasResult::release_model() {
  // @@protoc_insertion_point(field_release:lrobot.lidarvolumemeas.MeasResult.model)
  clear_has_model();
  ::lrobot::lidarvolumemeas::Model* temp = model_;
  model_ = NULL;
  return temp;
}
void MeasResult::set_allocated_model(::lrobot::lidarvolumemeas::Model* model) {
  delete model_;
  model_ = model;
  if (model) {
    set_has_model();
  } else {
    clear_has_model();
  }
  // @@protoc_insertion_point(field_set_allocated:lrobot.lidarvolumemeas.MeasResult.model)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message::kInfoFieldNumber;
const int Message::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message::Message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2fmessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:lrobot.lidarvolumemeas.Message)
}
Message::Message(const Message& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_data();
  switch (from.data_case()) {
    case kInfo: {
      mutable_info()->::lrobot::lidarvolumemeas::SysInfo::MergeFrom(from.info());
      break;
    }
    case kResult: {
      mutable_result()->::lrobot::lidarvolumemeas::MeasResult::MergeFrom(from.result());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:lrobot.lidarvolumemeas.Message)
}

void Message::SharedCtor() {
  _cached_size_ = 0;
  clear_has_data();
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:lrobot.lidarvolumemeas.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  if (has_data()) {
    clear_data();
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_proto_2fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Message& Message::default_instance() {
  protobuf_proto_2fmessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

Message* Message::New(::google::protobuf::Arena* arena) const {
  Message* n = new Message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:lrobot.lidarvolumemeas.Message)
  switch (data_case()) {
    case kInfo: {
      delete data_.info_;
      break;
    }
    case kResult: {
      delete data_.result_;
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:lrobot.lidarvolumemeas.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_data();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lrobot.lidarvolumemeas.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .lrobot.lidarvolumemeas.SysInfo info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .lrobot.lidarvolumemeas.MeasResult result = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lrobot.lidarvolumemeas.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lrobot.lidarvolumemeas.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lrobot.lidarvolumemeas.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (data_case()) {
    case kInfo:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, *data_.info_, output);
      break;
    case kResult:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, *data_.result_, output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lrobot.lidarvolumemeas.Message)
}

::google::protobuf::uint8* Message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lrobot.lidarvolumemeas.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (data_case()) {
    case kInfo:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          1, *data_.info_, deterministic, target);
      break;
    case kResult:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          2, *data_.result_, deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lrobot.lidarvolumemeas.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lrobot.lidarvolumemeas.Message)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  switch (data_case()) {
    // optional .lrobot.lidarvolumemeas.SysInfo info = 1;
    case kInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *data_.info_);
      break;
    }
    // optional .lrobot.lidarvolumemeas.MeasResult result = 2;
    case kResult: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *data_.result_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lrobot.lidarvolumemeas.Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Message* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lrobot.lidarvolumemeas.Message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lrobot.lidarvolumemeas.Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lrobot.lidarvolumemeas.Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.data_case()) {
    case kInfo: {
      mutable_info()->::lrobot::lidarvolumemeas::SysInfo::MergeFrom(from.info());
      break;
    }
    case kResult: {
      mutable_result()->::lrobot::lidarvolumemeas::MeasResult::MergeFrom(from.result());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lrobot.lidarvolumemeas.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lrobot.lidarvolumemeas.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  switch (data_case()) {
    case kInfo: {
      if (has_info()) {
        if (!this->info().IsInitialized()) return false;
      }
      break;
    }
    case kResult: {
      if (has_result()) {
        if (!this->result().IsInitialized()) return false;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return true;
}

void Message::Swap(Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message::InternalSwap(Message* other) {
  using std::swap;
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_proto_2fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Message

// optional .lrobot.lidarvolumemeas.SysInfo info = 1;
bool Message::has_info() const {
  return data_case() == kInfo;
}
void Message::set_has_info() {
  _oneof_case_[0] = kInfo;
}
void Message::clear_info() {
  if (has_info()) {
    delete data_.info_;
    clear_has_data();
  }
}
 const ::lrobot::lidarvolumemeas::SysInfo& Message::info() const {
  // @@protoc_insertion_point(field_get:lrobot.lidarvolumemeas.Message.info)
  return has_info()
      ? *data_.info_
      : ::lrobot::lidarvolumemeas::SysInfo::default_instance();
}
::lrobot::lidarvolumemeas::SysInfo* Message::mutable_info() {
  if (!has_info()) {
    clear_data();
    set_has_info();
    data_.info_ = new ::lrobot::lidarvolumemeas::SysInfo;
  }
  // @@protoc_insertion_point(field_mutable:lrobot.lidarvolumemeas.Message.info)
  return data_.info_;
}
::lrobot::lidarvolumemeas::SysInfo* Message::release_info() {
  // @@protoc_insertion_point(field_release:lrobot.lidarvolumemeas.Message.info)
  if (has_info()) {
    clear_has_data();
    ::lrobot::lidarvolumemeas::SysInfo* temp = data_.info_;
    data_.info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Message::set_allocated_info(::lrobot::lidarvolumemeas::SysInfo* info) {
  clear_data();
  if (info) {
    set_has_info();
    data_.info_ = info;
  }
  // @@protoc_insertion_point(field_set_allocated:lrobot.lidarvolumemeas.Message.info)
}

// optional .lrobot.lidarvolumemeas.MeasResult result = 2;
bool Message::has_result() const {
  return data_case() == kResult;
}
void Message::set_has_result() {
  _oneof_case_[0] = kResult;
}
void Message::clear_result() {
  if (has_result()) {
    delete data_.result_;
    clear_has_data();
  }
}
 const ::lrobot::lidarvolumemeas::MeasResult& Message::result() const {
  // @@protoc_insertion_point(field_get:lrobot.lidarvolumemeas.Message.result)
  return has_result()
      ? *data_.result_
      : ::lrobot::lidarvolumemeas::MeasResult::default_instance();
}
::lrobot::lidarvolumemeas::MeasResult* Message::mutable_result() {
  if (!has_result()) {
    clear_data();
    set_has_result();
    data_.result_ = new ::lrobot::lidarvolumemeas::MeasResult;
  }
  // @@protoc_insertion_point(field_mutable:lrobot.lidarvolumemeas.Message.result)
  return data_.result_;
}
::lrobot::lidarvolumemeas::MeasResult* Message::release_result() {
  // @@protoc_insertion_point(field_release:lrobot.lidarvolumemeas.Message.result)
  if (has_result()) {
    clear_has_data();
    ::lrobot::lidarvolumemeas::MeasResult* temp = data_.result_;
    data_.result_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Message::set_allocated_result(::lrobot::lidarvolumemeas::MeasResult* result) {
  clear_data();
  if (result) {
    set_has_result();
    data_.result_ = result;
  }
  // @@protoc_insertion_point(field_set_allocated:lrobot.lidarvolumemeas.Message.result)
}

bool Message::has_data() const {
  return data_case() != DATA_NOT_SET;
}
void Message::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
Message::DataCase Message::data_case() const {
  return Message::DataCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace lidarvolumemeas
}  // namespace lrobot

// @@protoc_insertion_point(global_scope)
